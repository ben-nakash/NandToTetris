// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx,	// zero the x input?
        nx,	// negate the x input?
        zy,	// zero the y input?
        ny, 	// negate the y input?
        f,		// compute  out = x + y (if 1) or out = x & y (if 0)
        no; 	// negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, 		// 1 if (out==0), 0 otherwise
        ng; 		// 1 if (out<0),  0 otherwise

    PARTS:
	// 		if zx then x=0 
    Mux16(a=x, b=false, sel=zx, out=zxOutput);		//If sel==1 then out=b else out=a.
	
	// 		if nx then x=~x 
	Not16(in=zxOutput, out=notZxOutout);
	Mux16(a=zxOutput, b=notZxOutout, sel=nx, out=nxOutput);
	
	// 		if zy then y=0 
	Mux16(a=y, b=false, sel=zy, out=zyOutput);
	
	// 		if ny then y=~y 
	Not16(in=zyOutput, out=notZyOutout);
	Mux16(a=zyOutput, b=notZyOutout, sel=ny, out=nyOutput);

	// 		if f: out=x+y , else: out=x&y 
	Add16(a=nxOutput, b=nyOutput, out=addResult);
	And16(a=nxOutput, b=nyOutput, out=andResult);
	Mux16(a=andResult, b=addResult, sel=f, out=tempOut);	
													
	// 		if no then out=~out 
	Not16(in=tempOut, out=notTempOut);
	Mux16(a=tempOut, b=notTempOut, sel=no, out=out, out=tempOut1);
	
	//      if out=0 then zr=1 else zr=0 
	Or16Way(in=tempOut1, out=tempOut2);
	Mux(a=true, b=false, sel=tempOut2, out=zr);
	
	//      if out<0 then ng=1 else ng=0 
	Mux16(a=tempOut1, b=tempOut1, sel=true, out[15]=temp);
	Mux(a=false, b=true, sel=temp, out=ng);
}
