// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File nAorMe: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAorM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // progrAorM (reset=1) or continue executing
                         // the current progrAorM (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=muxOutput);
	Not(in=instruction[15], out=notOutput);
    Or(a=notOutput, b=instruction[5], out=cForAReg);
    ARegister(in=muxOutput, load=cForAReg, out=AregOutput);
	
	And(a=instruction[15], b=instruction[12], out=cForMux);
	Mux16(a=AregOutput, b=inM, sel=cForMux, out=AorM);
	ALU(x=DregOutput, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, zr=zr, ng=ng);
	And(a=instruction[15], b=instruction[4], out=cForDReg);
	DRegister(in=ALUoutput, load=cForDReg, out=DregOutput);
	
    Or16(a=false, b=AregOutput, out[0..14]=addressM);
    Or16(a=false, b=ALUoutput, out=outM);
	Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);
    And(a=Cinstruction, b=instruction[3], out=writeM);
	
    And(a=zr, b=instruction[1], out=jeq);    
    And(a=ng, b=instruction[2], out=jlt);    
    Or(a=zr, b=ng, out=negOrZero);
    Not(in=negOrZero, out=greaterThanZero);           
    And(a=greaterThanZero, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=goToA);       
	
    And(a=Cinstruction, b=goToA, out=loadInputForPC); 
    Not(in=loadInputForPC, out=incInputForPC);             
    PC(in=AregOutput, inc=incInputForPC, load=loadInputForPC, reset=reset, out[0..14]=pc);
}
